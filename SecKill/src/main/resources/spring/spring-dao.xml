<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:component-scan base-package="com.hai.dao,com.hai.controller,com.hai.service,com.hai.exception,com.hai.filter"></context:component-scan>

<!--    引入数据源和redis的配置文件-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:redis.properties</value>
            </list>
        </property>
    </bean>

    <!--    管理数据源-->
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          p:driverClassName="${jdbc.driver}"
          p:url="${jdbc.url}"
          p:username="${jdbc.username}"
          p:password="${jdbc.password}"
          p:maxActive="${jdbc.maxActive}"
          p:maxIdle="${jdbc.maxIdle}"
          p:maxWait="${jdbc.maxWait}"
          p:minIdle="${jdbc.minIdle}"
          p:filters="${jdbc.filters}"
          p:initialSize="${jdbc.initialSize}"
          p:timeBetweenEvictionRunsMillis="${jdbc.timeBetweenEvictionRunsMillis}"
          p:minEvictableIdleTimeMillis="${jdbc.minEvictableIdleTimeMillis}"
          p:validationQuery="${jdbc.validationQuery}"
          p:testWhileIdle="${jdbc.testWhileIdle}"
          p:testOnBorrow="${jdbc.testOnBorrow}"
          p:testOnReturn="${jdbc.testOnReturn}"
          p:poolPreparedStatements="${jdbc.poolPreparedStatements}"
          p:maxPoolPreparedStatementPerConnectionSize="${jdbc.maxPoolPreparedStatementPerConnectionSize}"
    >
    </bean>

<!--        工厂管理-->
        <bean name="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
            <property name="dataSource" ref="dataSource"></property>
            <property name="configLocation" value="classpath:mybatis-config.xml"></property>
            <property name="typeAliasesPackage" value="com.hai.entity"></property>
<!--            <property name="mapperLocations" value="classpath:mapper/"></property>-->
        </bean>

<!--        基于Mapper方式的SQL-->
            <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
                <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
                <property name="basePackage" value="com.hai.dao"></property>
            </bean>

    <!--    管理事务-->
    <bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--    注解方式：-->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>

<!--            <bean id="redisDao" class="com.hai.dao.cache.RedisDao">-->
<!--                <constructor-arg index="0" value="127.0.0.1"></constructor-arg>-->
<!--                <constructor-arg index="1" value="6379"></constructor-arg>-->
<!--            </bean>-->




</beans>